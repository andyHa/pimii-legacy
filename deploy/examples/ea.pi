strSplit ::= (separator, string) -> [ 
    result := #();
    iterator := subStr -> [	
        idx := strIndexOf(separator, subStr);
        if: (idx > 0) then: [
            result := result & strLeft(subStr, idx - 1);            
            iterator(strLeft(subStr, (idx - 1 + strLength(separator)) * -1));
        ] else: [
	  result := result & subStr;
        ]
    ];
    iterator(string);

    // Filter empty strings...
    collect: result with: s -> strLength(s) > 0;
];

strSplit('$$', 'a$$b$,c$$d,');ARIABLE)
);

startOf := (subList, list) -> {
   [ x|subListTail := subList && y|listTail := list  && x = y :
      startOf(subListTail, listTail);
   ]
   [ x|listTail := list  && subList = x : #TRUE ]
   [ isNil( subList) : #TRUE  ]
   [        -        : #FALSE ]
};


ok := #(#VARIABLE);
ea := (start, fun, ok) -> [
   string -> [
	zustand := start;
	eachChar: string do: [ c ->
		check := #(zustand, c); 
		zustand := #FEHLER;
		each: fun do: [ line ->
			if: startOf(check, line) 
			then: [zustand := at(line, 3)];	
		];
	];
	indexOf(zustand, ok) > 0;
   ];
];

x := ea(#START, fun, ok);
x('a+b+'););