makeStack := initialValue -> #(initialValue);
popStack := stack -> {
      [h|t := head(stack) : setHead(stack, t); h]
};

peekStack := stack -> {
      [h|t := head(stack) : h]
};

pushStack := (stack, value) -> [
   setHead(stack, #(value) & head(stack));
];

vm := code -> [
   s := makeStack();
   e := makeStack();
   c := makeStack(code);
   d := makeStack();
   
   step := op -> {
      [op = #LDC : pushStack(s, popStack(c)) ]
      [op = #ADD : pushStack(s, popStack(s) + popStack(s)) ]
   };

  
   while: [peekStack(c) != nil] do: [ step(popStack(c));  ];
   popStack(s);
];

x := vm(#(#LDC, 1, #LDC 3, #ADD, #LDC, 5, #ADD));
log(x);