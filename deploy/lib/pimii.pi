// ---------------------------------------------------------------------------
// Library: pimii Standard Library
//
// Contains various standard functions for list and string processing.
// This is most probably included by all programs.
//
// Author: Andreas Haufler (andreas@haufler.info)
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// HELPER FUNCTIONS
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// Checks if the given argument is a list.
//
// Param: x - The value to be checked
// Returns: #TRUE is the given argument is a list, #FALSE otherwise.
// ---------------------------------------------------------------------------
isList := x -> sys::typeOf(x) = #TYPE_CONS;

// ---------------------------------------------------------------------------
// Checks if the given argument is NIL.
//
// Param: x - The value to be checked
// Returns: #TRUE is the given argument is NIL, #FALSE otherwise.
// ---------------------------------------------------------------------------
isNil := x -> (x = nil);

// ---------------------------------------------------------------------------
// Inverse of isNil.
// ---------------------------------------------------------------------------
notNil := x -> (x != nil);

// ---------------------------------------------------------------------------
// Computes the length of a given list. If the given value is not a list,
// 0 is returned.
//
// Param: list - The list which length is to be determined.
// Returns: The length of the given list, or 0 if the given value was not
//          a list.
// ---------------------------------------------------------------------------
length ::= list -> [
    fold: list with: [e, sum -> sum + 1] start: 0
];

// ---------------------------------------------------------------------------
// Reverses the order of the items in the given list.
// This method is important for list processing, because appending items to
// the front of a list is way faster than appending items to the end of a
// list. (The complexity is O(1) vs. O(n)). Therefore, when appending several
// items to a list, it is advisable to append them to the front and to reverse
// the list afterwards.
//
// Param: list - The list which is to be reversed.
// Returns: A list with the reverse order of the items in the given list.
//          If the given value was not a list, NIL will be returned.
// ---------------------------------------------------------------------------
reverse ::= list -> [
    fold: list with: [e, l -> e & l ] start: #()
];

// ---------------------------------------------------------------------------
// LIST MANIPULATION
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// Iterates over the given list and executes the given block for each item.
//
// Param: list  - a list which will be iterated
// Param: block - an unary function which is called for each item of the
//                given list.
// ---------------------------------------------------------------------------
each:do: ::= (list, block) -> {
    [h|t := list : block(h); each: t do: block]
};

// ---------------------------------------------------------------------------
// "Folds" the given list from left to right by calling this given block
// for each item of the list, along with an accumulator. The initial value
// for this accumulator is given by the sum parameter.
//
// Param: list  - a list which will be folded
// Param: block - a function which accepts two parameters, which is a list
//                item and the current accumulator. This will be called for
//                each item of the list.
// Param: sum   - the initial value of the accumulator.
// Returns: The value of the last execution of the given block, or the value
//          of the sum parameter, if the given list was empty.
// ---------------------------------------------------------------------------
fold:with:start: ::= (list, block, sum) -> {
    [h|t := list : fold: t with: block start: block(h, sum)]
    [     -      : sum ]
};

// ---------------------------------------------------------------------------
// Takes a list and a filter as arguments. Returns a copy of the given list
// which only contains elements for which the filter returned #TRUE.
//
// Param: list   - The list which will be filtered.
// Param: filter - An unary function, which is invoked for each element of
//                 the given list. When it returns #TRUE, the item is
//                 added to the resulting list.
// Returns: A copy of the given list, which contains only those elements, for
//          which the given filter function returned #TRUE.
// ---------------------------------------------------------------------------
collect:with: ::= (list, filter) -> [
    result := fold: list
              with: (e,l) -> {
                        [filter(e) : e & l]
                        [    -     : l]
                    }
              start: #();

    reverse(result);
];

// ---------------------------------------------------------------------------
// Takes a list and a filter as arguments. Returns a copy of the given list
// which only contains elements for which the filter returned not #TRUE.
//
// Param: list   - The list which will be filtered.
// Param: filter - An unary function, which is invoked for each element of
//                 the given list. When it does not return #TRUE, the item is
//                 added to the resulting list.
// Returns: A copy of the given list, which contains only those elements, for
//          which the given filter function returned anything but #TRUE.
// ---------------------------------------------------------------------------
reject:with: ::= (list, filter) -> [
    collect: list with: [ e -> !filter(e)]
];

// ---------------------------------------------------------------------------
// Takes a list and a mapping function as arguments. Returns a new list which
// contains the result of the mapping function, invoked on each of the input
// elements.
//
// Param: list    - The list which will be used as input.
// Param: mapping - An unary function which will be called for each element
//                  of the given list. The result of this call will be
//                  appended to the result list.
// Returns: A list which contains the results of each call of the mapping
//          function.
// ---------------------------------------------------------------------------
project:with: ::= (list, mapping) -> [
    result := fold: list with: [e,l -> mapping(e) & l] start: #();
    reverse(result);
];

// ---------------------------------------------------------------------------
// Replaces all occurences of "key" with "replacement" in the given list.
//
// Param: key          - The value which is to be replaced.
// Param: replacement  - The replacement value.
// Param: list         - The list which will be used as input.
// Returns: A list where all occurences of key are replaced by the given
//          replacement
// ---------------------------------------------------------------------------
replace:by:in: := (key, replacement, list) -> [
   project: list with: value -> {
      [value = key : replacement]
      [      -     : value]
   }
];

// ---------------------------------------------------------------------------
// Finds the first index of key in the given list.
//
// Param: key          - The value which is to be searched.
// Param: list         - The list which will be used as input.
// Returns: The numeric index of the first occurence of key or 0 if it does
//          not occur.
// ---------------------------------------------------------------------------
indexOf := (key, list) -> [
    iterator := (pos, list) -> {
        [ h|t := list && h = key : pos ]
        [ h|t := list : iterator(pos + 1, t) ]
        [ - : 0 ]
    };
    iterator(1, list);
];

// ---------------------------------------------------------------------------
// Finds the last index of key in the given list.
//
// Param: key  - The value which is to be searched.
// Param: list - The list which will be used as input.
// Returns: The numeric index of the last occurence of key or 0 if it does
//          not occur.
// ---------------------------------------------------------------------------
lastIndexOf := (key, list) -> [
    iterator := (lastIndex, pos, list) -> {
        [ h|t := list && h = key : iterator(pos, pos + 1, t)]
        [ h|t := list : iterator(lastIndex, pos + 1, t) ]
        [ - : lastIndex ]
    };
    iterator(0, 1, list);
];

// ---------------------------------------------------------------------------
// Checks if the given key occurs in the given list.
//
// Param: key  - The value which is to be searched.
// Param: list - The list which will be used as input.
// Returns: #TRUE, if the key occurs in the list, #FALSE otherwise.
// ---------------------------------------------------------------------------
contains := (key, list) -> indexOf(key, list) > 0;

// ---------------------------------------------------------------------------
// Checks if the given list starts with the given sub list.
//
// Param: subList - The list or element which should be the start of list
// Param: list - The list which should start with the given sub list.
// Returns: #TRUE, if subList is a list and list starts with exactly the same
//          elements as subList. Also #TRUE if subList is the first element
//          of list. #FALSE otherwise.
// ---------------------------------------------------------------------------
startOf := (subList, list) -> {
   [ x|subListTail := subList && y|listTail := list  && x = y :
      startOf(subListTail, listTail);
   ]
   [ x|listTail := list  && subList = x : #TRUE ]
   [ isNil( subList) : #TRUE  ]
   [        -        : #FALSE ]
};

// ---------------------------------------------------------------------------
// Adds a list to a list of lists. Unlike the & operator, this won't return
// a list, which contains all items of both given lists, but returns a list
// with one new child, which is the given list.
//
// Param: listOfLists  - The given collection of lists.
// Param: child        - The list which is to be appended to the given
//                       list of lists.
// Returns: A list which contains all lists of "listOfLists" and additionally
//          child as sub list.
// ---------------------------------------------------------------------------
listConcat := (listOfLists, child) -> {
   [ isNil(child) : listOfLists ]
   [ isNil(listOfLists) : #(child) ]
   [      -       : listOfLists & #(child) ]
};

// ---------------------------------------------------------------------------
// Splits a given list on each occurence of a given key.
//
// Param: key  - Used to check where the list should be splitted.
// Param: list - The list which will be used as input.
// Returns: A list of sub lists which contain the elements between the given
//          key.
// ---------------------------------------------------------------------------
split := (key, list) -> [
    iterator := (collection, currentList, list) -> {
        [ h|t := list && h = key :
            iterator(listConcat(collection, currentList), #(), t)
        ]
        [ h|t := list :  iterator(collection, currentList & h, t) ]
        [ - : listConcat(collection, currentList) ]
    };
    iterator(#(), #(), list);
];

// ---------------------------------------------------------------------------
// Creates a list which contains all items of all sub lists of the given list.
//
// Param: list - The list which will be used as input.
// Returns: A flat list which contains all items of all sub lists.
// ---------------------------------------------------------------------------
flatten := list -> {
   [ isList(list) :
      reverse(
         fold: list
         with: [ (x, sum) -> reverse(flatten(x)) & sum ]
         start: #())
   ]
   [ - : #(list) ]
};

// ---------------------------------------------------------------------------
// Performs a quicksort on the given list and uses the given predicate to
// compare elements.
//
// Param: list      - The list which will be used as input.
// Param: predicate - Used to compare two given elements.
// Returns: A list containing the elements of the input list sorted by the
//          given prediacte.
// ---------------------------------------------------------------------------
quicksortBy := (list, predicate) -> {
    [ pivot|rest := list :
        left := collect: rest with: [ x -> predicate(x, pivot) ];
        right := reject: rest with: [ x -> predicate(x, pivot) ];
        quicksortBy(left, predicate) & pivot & quicksortBy(right, predicate);
    ]
    [ - : list ]
};

// ---------------------------------------------------------------------------
// Sorts the given list in ascending order.
// ---------------------------------------------------------------------------
sort := list -> quicksortBy(list, [ (x, y) -> x < y ]);


// ---------------------------------------------------------------------------
// FUNCTIONS TO MIMIC IMPERATIVE PROGRAMS
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// Emulates an if statement for imperative programming.
//
// Param: decision - determines if the given block is executed or not.
// Param: block    - executed if the given decision is #TRUE
// ---------------------------------------------------------------------------
if:then: ::= (decision, block) -> {
    [decision : block()]
};

// ---------------------------------------------------------------------------
// Emulates an if statement for imperative programming. Additionally supports
// an else-part if the given decision was not #TRUE.
//
// Param: decision  - determines if the given block is executed or not.
// Param: block     - executed if the given decision is #TRUE
// Param: elseBlock - executed if the given decision is not #TRUE
// ---------------------------------------------------------------------------
if:then:else: ::= (decision, block, elseBlock) -> {
    [decision : block()]
    [    -    : elseBlock()]
};

// ---------------------------------------------------------------------------
// Emulates a while statement for imperative programming.
//
// Param: decisionBlock - invoked to check if the loop should continue.
// Param: loopBody      - executed as long as decisionBlock evaluates to #TRUE
// ---------------------------------------------------------------------------
while:do: ::= (descisionBlock, loopBody) -> {
    [descisionBlock() : loopBody(); while: descisionBlock do: loopBody]
};

// ---------------------------------------------------------------------------
// Emulates a for statement for imperative programming.
//
// Param: from  - the first value passed to the given block.
// Param: to    - the last value passed to the given bock.
// Param: step  - sets the increment in which the value is changed, before
//                the block is called again. If to is smaller than from,
//                step must be negative!
// Param: block - Called with all numbers between from and to (inclusive) with
//                the distance of step.
// ---------------------------------------------------------------------------
from:to:step:do: ::= (from, to, step, block) -> [
    i := from;
    while: [ i <= to ] do: [block(i); i := i + step;]
];

// ---------------------------------------------------------------------------
// Emulates a for statement with a step of 1.
//
// Short for "from: from to: to step: 1 do: block;"
// ---------------------------------------------------------------------------
from:to:do: ::= (from, to, block) -> [
    from: from to: to step: 1 do: block;
];

// ---------------------------------------------------------------------------
// EXTENDED TOOLS
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// Measures and prints the execution time of a given function.
// Param: block - Called to measure the exectuion duration.
// ---------------------------------------------------------------------------

measure: ::= block -> [
   start := sys::time();
   result := block();
   sys::log('Duration: ' & (sys::time() - start) & 'ms');
   result;
];
