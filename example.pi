fib := n ->
    if: n < 3
    then: [ 1 ]
    else: [ n + fib(n - 1)];

fib := n ->
    if:then:else:(n < 3, [ 1 ], [n + fib(n-1)]);

if := (predicate, ifBranch, elseBranch) ->
    <<#SEL>>

while := (predicate, loop) ->
    if: predicate() then: [
        loop();
        while(predicate, loop);
    ];


-> Doku

*) BIFs
*) Compiler
*) GC in string table
*) Exception handling
*) Debugging
*) GUI
*) SECD-Optimizations
*) Parallel-Kram

- Channels
- Co-routines
- Lazy eval

